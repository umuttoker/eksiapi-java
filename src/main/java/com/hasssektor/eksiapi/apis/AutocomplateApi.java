/*
 * Ekşi Sözlük UnPublic API
 * Ekşi sözlük'ün public olmayan apiyı. Bunu kullanmanın size yasal yaptırımları olabilir. Bunu kullanan kişiler bu riski göze almış olarak düşünülür.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: umt.toker@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hasssektor.eksiapi.apis;

import com.hasssektor.eksiapi.ApiCallback;
import com.hasssektor.eksiapi.ApiClient;
import com.hasssektor.eksiapi.ApiException;
import com.hasssektor.eksiapi.ApiResponse;
import com.hasssektor.eksiapi.Configuration;
import com.hasssektor.eksiapi.Pair;
import com.hasssektor.eksiapi.ProgressRequestBody;
import com.hasssektor.eksiapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hasssektor.eksiapi.models.AutocomplateNickResponse;
import com.hasssektor.eksiapi.models.AutocomplateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutocomplateApi {
    private ApiClient apiClient;

    public AutocomplateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutocomplateApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for complete */
    private com.squareup.okhttp.Call completeCall(String term, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/autocomplete/query/{term}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "term" + "\\}", apiClient.escapeString(term.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call completeValidateBeforeCall(String term, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling complete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = completeCall(term, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * hersey icin autocomplate
     * 
     * @param term  (required)
     * @return AutocomplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutocomplateResponse complete(String term) throws ApiException {
        ApiResponse<AutocomplateResponse> resp = completeWithHttpInfo(term);
        return resp.getData();
    }

    /**
     * hersey icin autocomplate
     * 
     * @param term  (required)
     * @return ApiResponse&lt;AutocomplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutocomplateResponse> completeWithHttpInfo(String term) throws ApiException {
        com.squareup.okhttp.Call call = completeValidateBeforeCall(term, null, null);
        Type localVarReturnType = new TypeToken<AutocomplateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * hersey icin autocomplate (asynchronously)
     * 
     * @param term  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call completeAsync(String term, final ApiCallback<AutocomplateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = completeValidateBeforeCall(term, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutocomplateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for completeNick */
    private com.squareup.okhttp.Call completeNickCall(String term, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/autocomplete/nick/{term}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "term" + "\\}", apiClient.escapeString(term.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call completeNickValidateBeforeCall(String term, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling completeNick(Async)");
        }
        
        
        com.squareup.okhttp.Call call = completeNickCall(term, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * sadece nickler icin autocomplate
     * 
     * @param term  (required)
     * @return AutocomplateNickResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutocomplateNickResponse completeNick(String term) throws ApiException {
        ApiResponse<AutocomplateNickResponse> resp = completeNickWithHttpInfo(term);
        return resp.getData();
    }

    /**
     * sadece nickler icin autocomplate
     * 
     * @param term  (required)
     * @return ApiResponse&lt;AutocomplateNickResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutocomplateNickResponse> completeNickWithHttpInfo(String term) throws ApiException {
        com.squareup.okhttp.Call call = completeNickValidateBeforeCall(term, null, null);
        Type localVarReturnType = new TypeToken<AutocomplateNickResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * sadece nickler icin autocomplate (asynchronously)
     * 
     * @param term  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call completeNickAsync(String term, final ApiCallback<AutocomplateNickResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = completeNickValidateBeforeCall(term, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutocomplateNickResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/*
 * Ekşi Sözlük UnPublic API
 * Ekşi sözlük'ün public olmayan apiyı. Bunu kullanmanın size yasal yaptırımları olabilir. Bunu kullanan kişiler bu riski göze almış olarak düşünülür.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: umt.toker@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hasssektor.eksiapi.apis;

import com.hasssektor.eksiapi.ApiCallback;
import com.hasssektor.eksiapi.ApiClient;
import com.hasssektor.eksiapi.ApiException;
import com.hasssektor.eksiapi.ApiResponse;
import com.hasssektor.eksiapi.Configuration;
import com.hasssektor.eksiapi.Pair;
import com.hasssektor.eksiapi.ProgressRequestBody;
import com.hasssektor.eksiapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hasssektor.eksiapi.models.Topic;
import com.hasssektor.eksiapi.models.TopicQueryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TopicApi {
    private ApiClient apiClient;

    public TopicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TopicApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for follow */
    private com.squareup.okhttp.Call followCall(String topicId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/topic/follow/{topicId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "topicId" + "\\}", apiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followValidateBeforeCall(String topicId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling follow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = followCall(topicId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * basligi takip et
     * 
     * @param topicId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void follow(String topicId) throws ApiException {
        followWithHttpInfo(topicId);
    }

    /**
     * basligi takip et
     * 
     * @param topicId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> followWithHttpInfo(String topicId) throws ApiException {
        com.squareup.okhttp.Call call = followValidateBeforeCall(topicId, null, null);
        return apiClient.execute(call);
    }

    /**
     * basligi takip et (asynchronously)
     * 
     * @param topicId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followAsync(String topicId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followValidateBeforeCall(topicId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getBuddyEntries */
    private com.squareup.okhttp.Call getBuddyEntriesCall(String topicId, Integer p, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/topic/{topicId}/buddies".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "topicId" + "\\}", apiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (p != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "p", p));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBuddyEntriesValidateBeforeCall(String topicId, Integer p, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling getBuddyEntries(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getBuddyEntriesCall(topicId, p, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * baslitaki buddy entrylerini getirir
     * 
     * @param topicId  (required)
     * @param p Sayfa numarası (optional)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topic getBuddyEntries(String topicId, Integer p) throws ApiException {
        ApiResponse<Topic> resp = getBuddyEntriesWithHttpInfo(topicId, p);
        return resp.getData();
    }

    /**
     * baslitaki buddy entrylerini getirir
     * 
     * @param topicId  (required)
     * @param p Sayfa numarası (optional)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topic> getBuddyEntriesWithHttpInfo(String topicId, Integer p) throws ApiException {
        com.squareup.okhttp.Call call = getBuddyEntriesValidateBeforeCall(topicId, p, null, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * baslitaki buddy entrylerini getirir (asynchronously)
     * 
     * @param topicId  (required)
     * @param p Sayfa numarası (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBuddyEntriesAsync(String topicId, Integer p, final ApiCallback<Topic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBuddyEntriesValidateBeforeCall(topicId, p, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDailyNices */
    private com.squareup.okhttp.Call getDailyNicesCall(String topicId, Integer p, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/topic/{topicId}/dailynice".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "topicId" + "\\}", apiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (p != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "p", p));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDailyNicesValidateBeforeCall(String topicId, Integer p, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling getDailyNices(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDailyNicesCall(topicId, p, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * gunun sukelalari
     * 
     * @param topicId  (required)
     * @param p Sayfa numarası (optional)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topic getDailyNices(String topicId, Integer p) throws ApiException {
        ApiResponse<Topic> resp = getDailyNicesWithHttpInfo(topicId, p);
        return resp.getData();
    }

    /**
     * gunun sukelalari
     * 
     * @param topicId  (required)
     * @param p Sayfa numarası (optional)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topic> getDailyNicesWithHttpInfo(String topicId, Integer p) throws ApiException {
        com.squareup.okhttp.Call call = getDailyNicesValidateBeforeCall(topicId, p, null, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * gunun sukelalari (asynchronously)
     * 
     * @param topicId  (required)
     * @param p Sayfa numarası (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDailyNicesAsync(String topicId, Integer p, final ApiCallback<Topic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDailyNicesValidateBeforeCall(topicId, p, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getLinks */
    private com.squareup.okhttp.Call getLinksCall(String topicId, Integer p, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/topic/{topicId}/links".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "topicId" + "\\}", apiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (p != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "p", p));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLinksValidateBeforeCall(String topicId, Integer p, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling getLinks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLinksCall(topicId, p, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * baslitaki linkleri getirir
     * 
     * @param topicId  (required)
     * @param p Sayfa numarası (optional)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topic getLinks(String topicId, Integer p) throws ApiException {
        ApiResponse<Topic> resp = getLinksWithHttpInfo(topicId, p);
        return resp.getData();
    }

    /**
     * baslitaki linkleri getirir
     * 
     * @param topicId  (required)
     * @param p Sayfa numarası (optional)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topic> getLinksWithHttpInfo(String topicId, Integer p) throws ApiException {
        com.squareup.okhttp.Call call = getLinksValidateBeforeCall(topicId, p, null, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * baslitaki linkleri getirir (asynchronously)
     * 
     * @param topicId  (required)
     * @param p Sayfa numarası (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLinksAsync(String topicId, Integer p, final ApiCallback<Topic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLinksValidateBeforeCall(topicId, p, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getNices */
    private com.squareup.okhttp.Call getNicesCall(String topicId, Integer p, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/topic/{topicId}/allnice".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "topicId" + "\\}", apiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (p != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "p", p));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNicesValidateBeforeCall(String topicId, Integer p, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling getNices(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getNicesCall(topicId, p, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * tum zamanlarin sukelalari
     * 
     * @param topicId  (required)
     * @param p Sayfa numarası (optional)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topic getNices(String topicId, Integer p) throws ApiException {
        ApiResponse<Topic> resp = getNicesWithHttpInfo(topicId, p);
        return resp.getData();
    }

    /**
     * tum zamanlarin sukelalari
     * 
     * @param topicId  (required)
     * @param p Sayfa numarası (optional)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topic> getNicesWithHttpInfo(String topicId, Integer p) throws ApiException {
        com.squareup.okhttp.Call call = getNicesValidateBeforeCall(topicId, p, null, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * tum zamanlarin sukelalari (asynchronously)
     * 
     * @param topicId  (required)
     * @param p Sayfa numarası (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNicesAsync(String topicId, Integer p, final ApiCallback<Topic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNicesValidateBeforeCall(topicId, p, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTopic */
    private com.squareup.okhttp.Call getTopicCall(String topicId, Integer p, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/topic/{topicId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "topicId" + "\\}", apiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (p != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "p", p));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTopicValidateBeforeCall(String topicId, Integer p, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling getTopic(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTopicCall(topicId, p, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * basligin entrylerini getirir
     * 
     * @param topicId  (required)
     * @param p Sayfa numarası (optional)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topic getTopic(String topicId, Integer p) throws ApiException {
        ApiResponse<Topic> resp = getTopicWithHttpInfo(topicId, p);
        return resp.getData();
    }

    /**
     * basligin entrylerini getirir
     * 
     * @param topicId  (required)
     * @param p Sayfa numarası (optional)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topic> getTopicWithHttpInfo(String topicId, Integer p) throws ApiException {
        com.squareup.okhttp.Call call = getTopicValidateBeforeCall(topicId, p, null, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * basligin entrylerini getirir (asynchronously)
     * 
     * @param topicId  (required)
     * @param p Sayfa numarası (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTopicAsync(String topicId, Integer p, final ApiCallback<Topic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTopicValidateBeforeCall(topicId, p, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTopicIdFromSlug */
    private com.squareup.okhttp.Call getTopicIdFromSlugCall(String term, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/topic/query".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (term != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "term", term));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTopicIdFromSlugValidateBeforeCall(String term, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling getTopicIdFromSlug(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTopicIdFromSlugCall(term, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * textle baslik id si doner
     * Autocomplateden sonra cagirmak lazim gibi gibi
     * @param term  (required)
     * @return TopicQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopicQueryResponse getTopicIdFromSlug(String term) throws ApiException {
        ApiResponse<TopicQueryResponse> resp = getTopicIdFromSlugWithHttpInfo(term);
        return resp.getData();
    }

    /**
     * textle baslik id si doner
     * Autocomplateden sonra cagirmak lazim gibi gibi
     * @param term  (required)
     * @return ApiResponse&lt;TopicQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopicQueryResponse> getTopicIdFromSlugWithHttpInfo(String term) throws ApiException {
        com.squareup.okhttp.Call call = getTopicIdFromSlugValidateBeforeCall(term, null, null);
        Type localVarReturnType = new TypeToken<TopicQueryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * textle baslik id si doner (asynchronously)
     * Autocomplateden sonra cagirmak lazim gibi gibi
     * @param term  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTopicIdFromSlugAsync(String term, final ApiCallback<TopicQueryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTopicIdFromSlugValidateBeforeCall(term, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopicQueryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for search */
    private com.squareup.okhttp.Call searchCall(String topicId, String term, Integer p, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/topic/{topicId}/search/{term}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "topicId" + "\\}", apiClient.escapeString(topicId.toString()))
        .replaceAll("\\{" + "term" + "\\}", apiClient.escapeString(term.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (p != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "p", p));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchValidateBeforeCall(String topicId, String term, Integer p, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling search(Async)");
        }
        
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling search(Async)");
        }
        
        
        com.squareup.okhttp.Call call = searchCall(topicId, term, p, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * baslikta arar
     * Eger term @ ile baslarsa bu bi suser nickidir ve suserin o basliktaki entrylerini getirir
     * @param topicId  (required)
     * @param term  (required)
     * @param p Sayfa numarası (optional)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topic search(String topicId, String term, Integer p) throws ApiException {
        ApiResponse<Topic> resp = searchWithHttpInfo(topicId, term, p);
        return resp.getData();
    }

    /**
     * baslikta arar
     * Eger term @ ile baslarsa bu bi suser nickidir ve suserin o basliktaki entrylerini getirir
     * @param topicId  (required)
     * @param term  (required)
     * @param p Sayfa numarası (optional)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topic> searchWithHttpInfo(String topicId, String term, Integer p) throws ApiException {
        com.squareup.okhttp.Call call = searchValidateBeforeCall(topicId, term, p, null, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * baslikta arar (asynchronously)
     * Eger term @ ile baslarsa bu bi suser nickidir ve suserin o basliktaki entrylerini getirir
     * @param topicId  (required)
     * @param term  (required)
     * @param p Sayfa numarası (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchAsync(String topicId, String term, Integer p, final ApiCallback<Topic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchValidateBeforeCall(topicId, term, p, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for unfollow */
    private com.squareup.okhttp.Call unfollowCall(String topicId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/topic/unfollow/{topicId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "topicId" + "\\}", apiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unfollowValidateBeforeCall(String topicId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling unfollow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = unfollowCall(topicId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * basligi takibi birak
     * 
     * @param topicId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void unfollow(String topicId) throws ApiException {
        unfollowWithHttpInfo(topicId);
    }

    /**
     * basligi takibi birak
     * 
     * @param topicId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> unfollowWithHttpInfo(String topicId) throws ApiException {
        com.squareup.okhttp.Call call = unfollowValidateBeforeCall(topicId, null, null);
        return apiClient.execute(call);
    }

    /**
     * basligi takibi birak (asynchronously)
     * 
     * @param topicId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unfollowAsync(String topicId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unfollowValidateBeforeCall(topicId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
